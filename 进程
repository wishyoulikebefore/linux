ps
#选项
-A：所有的 process 均显示出来
-a：不与 terminal 有关的所有 process 
-u：有效使用者相关的 process 
x：通常与 a 这个参数一起使用，可列出较完整信息
l：较长、较详细的将该 PID 的的信息列出；
j：工作的格式
-f：做一个更为完整的输出
#示例
ps aux    观察系统所有的程序数据
ps -lA    观察所有系统的数据
ps axjf   连同部分程序树状态

top
#选项
-d：指定每两次屏幕信息刷新之间的时间间隔
-u：只查看指定用户名的进程
-p：通过指定监控进程ID来仅仅监控某个进程的状态
-n:设置退出前屏幕刷新的次数
-b:将top输出编排成适合输出到文件的格式，可以使用这个选项创建进程日志
-q:该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行
-c:显示整个命令行而不只是显示命令名
#示例
top -d 5    更新延时设置为5秒（默认3秒）
top -n 8    退出前屏幕再刷新10次
top -u mysql    只查看有效用户名为mysql的进程
top -p 200,2000    只查看进程200和2000
top -b -n 12000 > plog 运行top并记录命令输出，时长10小时，保存到plog文件
“
项目列信息
PID — 进程id
USER — 进程所有者
PR — 进程优先级
NI — nice值。负值表示高优先级，正值表示低优先级
VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
SHR — 共享内存大小，单位kb
S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
%CPU — 上次更新到现在的CPU时间占用百分比
%MEM — 进程使用的物理内存百分比
TIME+ — 进程使用的CPU时间总计，单位1/100秒
COMMAND — 进程名称（命令名/命令行）
”

pstree
#选项
-A：各程序树之间的连接以 ASCII 字符来连接；
-p：并同时列出每个 process 的 PID；
-u：并同时列出每个 process 的所属账号名称

fuser：借由档案(或文件系统)找出正在使用该档案的程序
fuser [-umv] [-k [i] [-signal]] file/dir
#选项
-u：除了程序的 PID 之外，同时列出该程序的拥有者
-m：后面接的那个档名会主动的上提到该文件系统的最顶层
-v：可以列出每个档案与程序还有指令的完整相关性
-k：找出使用该档案/目录的 PID ，并试图以 SIGKILL 这个讯号给予该 PID
-i必须与 -k 配合，在删除 PID 之前会先询问使用者意愿！
-signal：例如 -1 -15 等等，若不加的话，预设是 SIGKILL (-9)

lsof：列出被程序所开启的档案文件名

crontab：可以在固定的间隔时间执行指定的系统指令或 shell script脚本
时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合；非常适合周期性的日志分析或数据备份等工作
crontab [-u user] file crontab [-u user] [ -e | -l | -r ]
#选项
-u user：用来设定某个用户的crontab服务；
file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab
-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件
-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容
-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件
-i：在删除用户的crontab文件时给确认提示
“
文件格式
分 时 日 月 星期 要运行的命令
#第1列分钟0～59
#第2列小时0～23（0表示子夜）
#第3列日1～31
#第4列月1～12
#第5列星期0～7（0和7表示星期天）
#第6列要运行的命令
”

针对进程进行的操作
监控某一进程:pidof
当前shell进程的PID：$$
上一个后台进程的PID：$! 
myCommand && pid=$!
myCommand & echo $! >/path/to/pid.file
查看指定进程是否存在
if ps -p $PID > /dev/null
then
   echo "$PID is running"
fi
