自顶向下设计：先确定上层步骤，然后再逐步细化这些步骤的过程

判断式
--------------------------
判断符号：[]
中括号的两端需要有空格符来分隔
if [ -d file ]
--------------------------
test指令
#选项
-e：该『档名』是否存在？
-f：该『档名』是否存在且为档案(file)？
-d：该『档名』是否存在且为目录？
#示例
两个档案间的比较：-nt (newer than) -ot (older than) -ef 是否为同一档案
test n1 -eq n2
判定字符串的数据
test -z string：判定字符串是否为 0 
test string：判断是否非0
--------------------------
更现代的test：[[]]
返回结果为True或者False
增加功能：
1）string1=~regex 支持正则匹配
[[ "$INT" =~ ^-?[0-9]+$ ]]
2）==操作符支持模式匹配
[[ $FILE == foo.* ]]

控制运算符：; && ||
command1 && command2 || command3

循环
-----------------------------
if型
if ;then

elif ;then

else

fi
-----------------------------
while型
while [ condition ];do 

done
-----------------------------
for型
for ;do ;done
#for i in {A..D}; do echo $i; done
或者 for (( expression1; expression2 ));do ;done
#for (( i=0;i<5;i+=1 )); do echo $i; done

