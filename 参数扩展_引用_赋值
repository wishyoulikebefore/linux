echo命令：输出
#选项
echo –n 不换行输出
echo –e 处理特殊字符

基本参数
当变量相邻于其它文本时，必须使用{}，避免混淆
echo "${a}_file"

扩展
1）空变量扩展的管理
设置默认值：用于处理参数缺失或设置默认值
${parameter:-word} 或者 ${parameter:=word}
--------------------------------------------
foo=
echo ${foo:-"substitute value if unset"}
--------------------------------------------
检测：若参数未设定或为空，则退出
${parameter:?word}

2）波浪线扩展：用在一个单词的开头，将被扩展为指定用户的主目录名；若未指定，则扩展为当前用户的主目录
#示例
echo ~
echo ~foo

3）算术扩展
#示例
echo $((2+2))
echo $(((5**2)*3))

花括号扩展：创建多种文本字符串，用于创建一系列的文件或者目录
#示例
echo Front-{A,B,C}-Back
Front-A-Back Front-B-Back Front-C-Back
echo Number_{1..5}
Number_1 Number_2 Number_3 Number_4 Number_5
echo a{A{1,2},B{3,4}}b
aA1b aA2b aB3b aB4b

参数扩展
#示例
echo $USER

命令替换：把一个命令的输出作为一个扩展模式使用
#示例
echo $(ls)

引用
双引号：将文本放入双引号，除“$”,"\","'"外，所有特殊字符都会失去意义，即单词分割、路径名扩展、波浪线扩展和花括号扩展都讲失效
        而参数扩展、算术扩展和命令替换依然有效
#示例
echo $(cal)
June 2018 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
echo "$(cal)"
      June 2018
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30

单引号：抑制所有扩展

转义字符

为常量和变量赋值

赋值:$
#示例
d=$((ls -l))
mv $filename ${filename}1
---------------------------
位置参数
$$:Shell本身的PID（ProcessID） 
$!:Shell最后运行的后台Process的PID 
$?:最后运行的命令的结束代码， 判断程序是否正常结束
$*:所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。 
$@:所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。 
$#:添加到Shell的参数个数 
$0:Shell本身的文件名 
$1～$n:添加到Shell的各参数值。$1是第1参数、$2是第2参数…

取消赋值:unset

宣布变量类型：declare
#选项
-a:array
-i:integer
#示例
declare -i sum=100+300+50

左移位置参数：shift
shift 3表示原来的$4现在变成$1;不带参数的shift命令相当于shift 1
